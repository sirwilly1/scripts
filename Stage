Here's a Python script that accomplishes what you described:

```python
import struct
from scapy.all import IP, UDP, send

def split_payload(payload_file, packet_size, destination_ip, destination_port):
    with open(payload_file, 'rb') as file:
        payload = file.read()
    
    packets = [payload[i:i+packet_size] for i in range(0, len(payload), packet_size)]
    
    for i, packet_data in enumerate(packets):
        packet = IP(dst=destination_ip)/UDP(dport=destination_port)/packet_data
        send(packet, verbose=False)
        print(f"Sent packet {i+1}/{len(packets)}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Split payload into packets and send them to specified destination.')
    parser.add_argument('payload_file', type=str, help='Path to the payload bin file')
    parser.add_argument('packet_size', type=int, help='Size of the packets')
    parser.add_argument('destination_ip', type=str, help='Destination IP address')
    parser.add_argument('destination_port', type=int, help='Destination port')
    
    args = parser.parse_args()
    
    split_payload(args.payload_file, args.packet_size, args.destination_ip, args.destination_port)
```

To use this script, save it in a Python file (e.g., `payload_splitter.py`) and run it from the command line like this:

```
python payload_splitter.py payload.bin 1000 192.168.1.100 1234
```

Replace `payload.bin` with the path to your payload bin file, `1000` with the size of the packets you want to send, `192.168.1.100` with the destination IP address, and `1234` with the destination port number.



------------------
Sure, you can add a custom header field to each packet indicating the order. Here's the modified script:

```python
import struct
from scapy.all import IP, UDP, send

def split_payload(payload_file, packet_size, destination_ip, destination_port):
    with open(payload_file, 'rb') as file:
        payload = file.read()
    
    packets = [payload[i:i+packet_size] for i in range(0, len(payload), packet_size)]
    
    for i, packet_data in enumerate(packets):
        header = struct.pack("!I", i)  # Convert packet index to 4-byte integer
        packet = IP(dst=destination_ip)/UDP(dport=destination_port)/header+packet_data
        send(packet, verbose=False)
        print(f"Sent packet {i+1}/{len(packets)}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Split payload into packets and send them to specified destination.')
    parser.add_argument('payload_file', type=str, help='Path to the payload bin file')
    parser.add_argument('packet_size', type=int, help='Size of the packets')
    parser.add_argument('destination_ip', type=str, help='Destination IP address')
    parser.add_argument('destination_port', type=int, help='Destination port')
    
    args = parser.parse_args()
    
    split_payload(args.payload_file, args.packet_size, args.destination_ip, args.destination_port)
```

Now each packet will include a 4-byte header indicating its order in the sequence. You can modify the header format and size as needed.


-------
import struct
from scapy.all import IP, UDP, Raw, send

def split_payload(payload_file, packet_size, destination_ip, destination_port):
    with open(payload_file, 'rb') as file:
        payload = file.read()
    
    packets = [payload[i:i+packet_size] for i in range(0, len(payload), packet_size)]
    
    for i, packet_data in enumerate(packets):
        header = struct.pack("!I", i)  # Convert packet index to 4-byte integer
        packet = IP(dst=destination_ip)/UDP(dport=destination_port)/Raw(load=header + packet_data)
        print(f"Packet {i+1}: {packet.summary()}")
        send(packet, verbose=False)
        print(f"Sent packet {i+1}/{len(packets)}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Split payload into packets and send them to specified destination.')
    parser.add_argument('payload_file', type=str, help='Path to the payload bin file')
    parser.add_argument('packet_size', type=int, help='Size of the packets')
    parser.add_argument('destination_ip', type=str, help='Destination IP address')
    parser.add_argument('destination_port', type=int, help='Destination port')
    
    args = parser.parse_args()
    
    split_payload(args.payload_file, args.packet_size, args.destination_ip, args.destination_port)





--------
import struct
from scapy.all import IP, UDP, send

def split_payload(payload_file, packet_size, destination_ip, destination_port):
    with open(payload_file, 'rb') as file:
        payload = file.read()
    
    packets_hex = [payload[i:i+packet_size].hex() for i in range(0, len(payload), packet_size)]
    
    for i, packet_hex in enumerate(packets_hex):
        header = struct.pack("!I", i)  # Convert packet index to 4-byte integer
        packet = IP(dst=destination_ip, proto=17)/UDP(dport=destination_port)/header + bytes.fromhex(packet_hex)
        print(f"Packet {i+1} data (hex): {packet_hex}")
        print(f"Packet {i+1}: {packet.summary()}")
        send(packet, verbose=False)
        print(f"Sent packet {i+1}/{len(packets_hex)}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Split payload into packets and send them to specified destination.')
    parser.add_argument('payload_file', type=str, help='Path to the payload bin file')
    parser.add_argument('packet_size', type=int, help='Size of the packets')
    parser.add_argument('destination_ip', type=str, help='Destination IP address')
    parser.add_argument('destination_port', type=int, help='Destination port')
    
    args = parser.parse_args()
    
    split_payload(args.payload_file, args.packet_size, args.destination_ip, args.destination_port)



-------

from scapy.all import sniff

def print_received_packet(packet):
    if packet.haslayer("Raw"):
        data = packet["Raw"].load
        print(f"Received data: {data}")

def receive_data(protocol, port):
    if protocol.lower() == "tcp":
        sniff(filter=f"tcp port {port}", prn=print_received_packet)
    elif protocol.lower() == "udp":
        sniff(filter=f"udp port {port}", prn=print_received_packet)
    else:
        print("Unsupported protocol. Please specify either 'tcp' or 'udp'.")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Receive and print out data.')
    parser.add_argument('protocol', type=str, help='Protocol to listen for (TCP or UDP)')
    parser.add_argument('port', type=int, help='Port to listen on')
    
    args = parser.parse_args()
    
    receive_data(args.protocol, args.port)
