Certainly! Let's consider a more complex example where we have multiple subdirectories for source files and external libraries, and we want to build multiple executables with different configurations. 

### Project Structure:

```
project/
|-- src/
|   |-- main/
|   |   |-- main.c
|   |-- utils/
|   |   |-- utils.c
|   |   |-- utils.h
|-- include/
|   |-- common.h
|-- libs/
|   |-- libfoo/
|       |-- foo.c
|       |-- foo.h
|-- obj/
|-- bin/
|-- Makefile
|-- common.mk
|-- utils.mk
|-- libs.mk
```

### Detailed Explanation:

#### common.mk:

```makefile
# common.mk

# Compiler and flags
CC := gcc
CFLAGS := -Wall -Wextra -I./include

# Directories
SRCDIR := src
OBJDIR := obj
BINDIR := bin
LIBDIR := libs

# Rule to create directories if they don't exist
$(OBJDIR) $(BINDIR):
	mkdir -p $@

# Clean rule
.PHONY: clean
clean:
	rm -rf $(OBJDIR) $(BINDIR)
```

- Defines compiler (`CC`) and compiler flags (`CFLAGS`).
- Specifies directories for source files (`SRCDIR`), object files (`OBJDIR`), binary files (`BINDIR`), and external libraries (`LIBDIR`).
- Includes a rule to create directories if they don't exist.
- Provides a clean rule to remove generated files and directories.

#### utils.mk:

```makefile
# utils.mk

# Source files
UTILS_SRCS := $(wildcard $(SRCDIR)/utils/*.c)
UTILS_OBJS := $(patsubst $(SRCDIR)/%.c, $(OBJDIR)/%.o, $(UTILS_SRCS))

# Rule to compile utility functions
$(OBJDIR)/utils/%.o: $(SRCDIR)/utils/%.c | $(OBJDIR)/utils
	$(CC) $(CFLAGS) -c $< -o $@

# Target to create directory for utility object files
$(OBJDIR)/utils: | $(OBJDIR)
	mkdir -p $@
```

- Uses pattern matching to find utility source files within the `src/utils` directory.
- Defines rules to compile utility functions from source files into object files.
- Creates a directory for utility object files if it doesn't exist.

#### libs.mk:

```makefile
# libs.mk

# Library paths
LIBFOO_DIR := $(LIBDIR)/libfoo

# Source files
LIBFOO_SRCS := $(wildcard $(LIBFOO_DIR)/*.c)
LIBFOO_OBJS := $(patsubst $(LIBFOO_DIR)/%.c, $(OBJDIR)/%.o, $(LIBFOO_SRCS))

# Rule to compile libfoo
$(OBJDIR)/libfoo/%.o: $(LIBFOO_DIR)/%.c | $(OBJDIR)/libfoo
	$(CC) $(CFLAGS) -c $< -o $@

# Target to create directory for libfoo object files
$(OBJDIR)/libfoo: | $(OBJDIR)
	mkdir -p $@
```

- Specifies the path to the `libfoo` library within the `libs` directory.
- Finds source files for `libfoo` within its directory.
- Defines rules to compile `libfoo` source files into object files.
- Creates a directory for `libfoo` object files if it doesn't exist.

#### Makefile:

```makefile
# Makefile

# Include common configuration
include common.mk
include utils.mk
include libs.mk

# Main targets
all: $(BINDIR)/program1 $(BINDIR)/program2

# Rule to build program1
$(BINDIR)/program1: $(OBJDIR)/main/main.o $(UTILS_OBJS) $(OBJDIR)/libfoo/foo.o | $(BINDIR)
	$(CC) $(CFLAGS) $^ -o $@

# Rule to build program2
$(BINDIR)/program2: $(OBJDIR)/main/main.o $(UTILS_OBJS) $(OBJDIR)/libfoo/foo.o | $(BINDIR)
	$(CC) $(CFLAGS) $^ -o $@

# Dependency generation rule
-include $(OBJDIR)/*.d

# Phony target for cleaning
.PHONY: clean
clean:
	rm -rf $(OBJDIR) $(BINDIR)
```

- Includes common configuration and modular Makefile fragments (`common.mk`, `utils.mk`, `libs.mk`).
- Defines main targets (`all`) to build multiple executables (`program1`, `program2`).
- Rules to build each executable specify dependencies on main source files, utility object files, and `libfoo` object files.
- Dependency generation rule includes dependency files for automatic rebuilding.
- Phony target `clean` removes generated files and directories.

This example demonstrates how to organize a more complex Makefile system with multiple directories, modularization, and support for building multiple executables with different configurations. It promotes maintainability, reusability, and scalability in larger projects.
