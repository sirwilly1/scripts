When removing debug prints causes your program to stop working, it might be due to several reasons, including timing issues, compiler optimizations, or unintended side effects. Here are a few possible causes and suggestions for addressing them:

### Possible Causes

1. **Timing/Heisenbug**:
   - Debug prints can affect the timing of your program. Removing them might change the timing, leading to race conditions or other timing-sensitive bugs.
   
2. **Compiler Optimizations**:
   - When you remove debug prints, the compiler might optimize the code differently. This can sometimes hide or reveal bugs.
   
3. **Uninitialized Variables**:
   - If your code has uninitialized variables, their values might change when the debug prints are removed, leading to undefined behavior.

4. **Side Effects in Debug Prints**:
   - The debug prints themselves might have side effects that unintentionally make the code work, such as flushing buffers or modifying the state of variables.

### Troubleshooting Steps

1. **Add Delays**:
   - Add `sleep` or `usleep` calls in place of removed debug prints to check if timing is an issue.

2. **Check for Uninitialized Variables**:
   - Ensure all variables are properly initialized before use.

3. **Revisit Compiler Options**:
   - Compile your code with different optimization levels to see if it makes a difference (e.g., `-O0`, `-O2`).

4. **Use Volatile Keyword**:
   - If timing is an issue, declaring certain variables as `volatile` can prevent the compiler from optimizing out necessary operations.

5. **Run with Valgrind**:
   - Use tools like Valgrind to check for memory issues, such as uninitialized memory access or buffer overflows.

### Example Adjustments

Hereâ€™s an example of how you might adjust your code to include artificial delays and ensure proper initialization:

```c
#include <pcap.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h> // For sleep
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>

struct pseudo_header {
    u_int32_t source_address;
    u_int32_t dest_address;
    u_int8_t placeholder;
    u_int8_t protocol;
    u_int16_t tcp_length;
};

unsigned short checksum(void *b, int len) {
    unsigned short *buf = b;
    unsigned int sum = 0;
    unsigned short result;

    for (sum = 0; len > 1; len -= 2)
        sum += *buf++;
    if (len == 1)
        sum += *(unsigned char *)buf;
    sum = (sum >> 16) + (sum & 0xFFFF);
    sum += (sum >> 16);
    result = ~sum;
    return result;
}

void packet_handler(u_char *args, const struct pcap_pkthdr *header, const u_char *packet) {
    struct iphdr *iph = (struct iphdr *)(packet + 14); // Skip Ethernet header
    struct tcphdr *tcph = (struct tcphdr *)(packet + 14 + iph->ihl * 4);

    // Artificial delay to mimic timing affected by debug prints
    usleep(100); 

    // Modify IP and TCP headers
    iph->saddr = inet_addr("SRC_IP"); // Replace with actual source IP
    iph->daddr = inet_addr("TARGET_IP"); // Replace with actual target IP
    tcph->source = htons(SRC_PORT); // Replace with actual source port
    tcph->dest = htons(TARGET_PORT); // Replace with actual target port

    // Ensure checksum calculation is correct
    iph->check = 0;
    iph->check = checksum((unsigned short *)iph, iph->ihl * 4);

    struct pseudo_header psh;
    psh.source_address = inet_addr("SRC_IP");
    psh.dest_address = inet_addr("TARGET_IP");
    psh.placeholder = 0;
    psh.protocol = IPPROTO_TCP;
    psh.tcp_length = htons(sizeof(struct tcphdr));

    int psize = sizeof(struct pseudo_header) + sizeof(struct tcphdr);
    unsigned char *pseudogram = malloc(psize);

    if (!pseudogram) {
        fprintf(stderr, "Memory allocation failed\n");
        return;
    }

    memcpy(pseudogram, (char *)&psh, sizeof(struct pseudo_header));
    memcpy(pseudogram + sizeof(struct pseudo_header), tcph, sizeof(struct tcphdr));

    tcph->check = checksum((unsigned short *)pseudogram, psize);

    free(pseudogram);

    // Send the modified packet (use raw sockets here)
    // Placeholder for actual packet sending code
}

int main(int argc, char *argv[]) {
    if (argc != 5) {
        printf("Usage: %s <targetIp> <targetPort> <srcIp> <srcPort>\n", argv[0]);
        return 1;
    }

    char *targetIp = argv[1];
    int targetPort = atoi(argv[2]);
    char *srcIp = argv[3];
    int srcPort = atoi(argv[4]);

    char errbuf[PCAP_ERRBUF_SIZE];
    pcap_t *handle;

    // Open the session in promiscuous mode
    handle = pcap_open_live("eth0", BUFSIZ, 1, 1000, errbuf);
    if (handle == NULL) {
        fprintf(stderr, "Couldn't open device: %s\n", errbuf);
        return 2;
    }

    // Capture packets
    pcap_loop(handle, 0, packet_handler, NULL);

    pcap_close(handle);
    return 0;
}
```

### Additional Tips

- **Verbose Logging**: Temporarily add verbose logging to check if removing debug prints causes other issues.
- **Isolate Changes**: Gradually remove debug prints to isolate which print statements' removal causes the problem.
- **Memory and Buffer Handling**: Double-check memory allocations and buffer handling for potential issues that might be hidden by debug prints.

By carefully analyzing and addressing these potential issues, you can identify why the removal of debug prints affects your program's behavior and ensure it operates correctly without them.
