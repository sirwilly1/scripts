#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define LISTEN_PORT 8080
#define MAX_BUFFER_SIZE 1024

// Function to parse the header and extract the next server's IP and port
int parseHeader(char *header, char *nextServerIP, int *nextServerPort) {
    if (sscanf(header, "%s %d", nextServerIP, nextServerPort) == 2) {
        return 1; // Successfully parsed the header
    }
    return 0; // Failed to parse the header
}

int main() {
    int listen_fd, new_socket;
    struct sockaddr_in listen_address, next_server_address;
    int addrlen = sizeof(listen_address);
    char buffer[MAX_BUFFER_SIZE];
    char nextServerIP[16]; // Assuming IPv4
    int nextServerPort;

    // Create a socket to listen for incoming connections
    if ((listen_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Set up the address to listen on
    listen_address.sin_family = AF_INET;
    listen_address.sin_addr.s_addr = INADDR_ANY;
    listen_address.sin_port = htons(LISTEN_PORT);

    // Bind the socket to the specified address and port
    if (bind(listen_fd, (struct sockaddr *)&listen_address, sizeof(listen_address)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(listen_fd, 3) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Listening on port %d...\n", LISTEN_PORT);

    // Accept incoming connections and redirect data
    while (1) {
        if ((new_socket = accept(listen_fd, (struct sockaddr *)&listen_address, (socklen_t *)&addrlen)) < 0) {
            perror("Accept failed");
            exit(EXIT_FAILURE);
        }

        // Read the header from the client
        int valread = read(new_socket, buffer, MAX_BUFFER_SIZE);

        if (valread <= 0) {
            close(new_socket);
            continue; // Skip empty or erroneous data
        }

        // Parse the header to extract the next server's IP and port
        if (parseHeader(buffer, nextServerIP, &nextServerPort)) {
            // Create a socket to connect to the next server
            int next_server_fd = socket(AF_INET, SOCK_STREAM, 0);
            if (next_server_fd == -1) {
                perror("Next server socket creation failed");
                close(new_socket);
                continue;
            }

            // Set up the address of the next server
            next_server_address.sin_family = AF_INET;
            next_server_address.sin_port = htons(nextServerPort);
            if (inet_pton(AF_INET, nextServerIP, &next_server_address.sin_addr) <= 0) {
                perror("Invalid IP address");
                close(new_socket);
                close(next_server_fd);
                continue;
            }

            // Connect to the next server
            if (connect(next_server_fd, (struct sockaddr *)&next_server_address, sizeof(next_server_address)) < 0) {
                perror("Next server connection failed");
                close(new_socket);
                close(next_server_fd);
                continue;
            }

            // Forward data from the client to the next server
            write(next_server_fd, buffer, valread);

            // Forward data from the next server back to the client
            int bytes_received = 0;
            while ((bytes_received = read(next_server_fd, buffer, MAX_BUFFER_SIZE)) > 0) {
                write(new_socket, buffer, bytes_received);
            }

            // Close the connections
            close(new_socket);
            close(next_server_fd);
        } else {
            // Header parsing failed
            printf("Failed to parse header.\n");
            close(new_socket);
        }
    }

    return 0;
}
//////////////////////



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAX_BUFFER_SIZE 1024

// Function to process data based on the header
void processHeader(char *header) {
    if (strchr(header, '!') || strchr(header, '#')) {
        // Do something when '!' or '#' is found in the header
        printf("Header contains '!' or '#'. Performing some action...\n");
        // Your code to handle this case goes here.
    } else {
        // Do something when '!' or '#' is not found in the header
        printf("Header does not contain '!' or '#'.\n");
        // Your code for the other case goes here.
    }
}

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[MAX_BUFFER_SIZE] = {0};

    // Create a socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Set up the server address
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind the socket to the specified address and port
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_fd, 3) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Listening on port %d...\n", PORT);

    // Accept incoming connections and process data
    while (1) {
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
            perror("Accept failed");
            exit(EXIT_FAILURE);
        }

        // Read data from the client
        int valread = read(new_socket, buffer, MAX_BUFFER_SIZE);

        if (valread <= 0) {
            close(new_socket);
            continue; // Skip empty or erroneous data
        }

        // Assuming the header is at the beginning of the received data
        processHeader(buffer);

        // Close the connection
        close(new_socket);
    }

    return 0;
}


//////////////

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/types.h>

#define MAX_BUFFER_SIZE 65536
#define REDIRECT_CHARACTER '!'
#define FINAL_SERVER_CHARACTER '#'

// Function to parse the packet data
void parsePacketData(char *packetData, int packetLength) {
    // Assuming packetData is an IP packet with TCP payload
    struct ip *ipHeader = (struct ip *)packetData;
    struct tcphdr *tcpHeader = (struct tcphdr *)(packetData + ipHeader->ip_hl * 4);

    // Check if the packet contains the '!' character
    char *payload = packetData + ipHeader->ip_hl * 4 + tcpHeader->th_off * 4;
    int payloadLength = packetLength - (ipHeader->ip_hl * 4 + tcpHeader->th_off * 4);

    if (memchr(payload, REDIRECT_CHARACTER, payloadLength) != NULL) {
        // Extract the next server's IP and port
        char nextServerIP[16]; // Assuming IPv4
        int nextServerPort;

        // Parse the data after the '!'
        char *nextServerData = strchr(payload, REDIRECT_CHARACTER) + 1;
        if (sscanf(nextServerData, "%s %d", nextServerIP, &nextServerPort) == 2) {
            // Forward data to the next server (nextServerIP, nextServerPort)
            printf("Forwarding to the next server: IP=%s, Port=%d\n", nextServerIP, nextServerPort);
            // Add your code here to forward the data to the next server.
        } else {
            printf("Invalid format after '!'\n");
        }
    } else if (memchr(payload, FINAL_SERVER_CHARACTER, payloadLength) != NULL) {
        // This is the final server, handle it accordingly
        printf("Packet redirected to the final server.\n");
        // Add your code here to handle the final server.
    } else {
        printf("Unknown packet content.\n");
    }
}

int main() {
    int sock, packetLength;
    char buffer[MAX_BUFFER_SIZE];

    // Create a raw socket to capture packets
    sock = socket(AF_INET, SOCK_RAW, IPPROTO_TCP);
    if (sock < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    while (1) {
        packetLength = recv(sock, buffer, MAX_BUFFER_SIZE, 0);
        if (packetLength < 0) {
            perror("Packet reception error");
            exit(EXIT_FAILURE);
        }

        // Parse and handle the received packet data
        parsePacketData(buffer, packetLength);
    }

    return 0;
}



///////////

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/if_ether.h>
#include <net/if.h>
#include <sys/ioctl.h>

#define INTERFACE_NAME "eth0"
#define MAX_PACKET_SIZE 65536
#define REDIRECT_CHARACTER '!'
#define FINAL_SERVER_CHARACTER '#'

// Function to process and redirect packet data
void process_packet(char *packet, int packet_length) {
    char *payload = packet + 14; // Skip Ethernet header (14 bytes)

    char *redirect_start = strchr(payload, REDIRECT_CHARACTER);
    if (redirect_start != NULL) {
        char *redirect_end = strchr(redirect_start + 1, FINAL_SERVER_CHARACTER);
        if (redirect_end != NULL) {
            // Extract the next server's IP and port
            char nextServerIP[16]; // Assuming IPv4
            int nextServerPort;

            if (sscanf(redirect_start + 1, "%15s %d", nextServerIP, &nextServerPort) == 2) {
                // Forward data to the next server (nextServerIP, nextServerPort)
                printf("Forwarding to the next server: IP=%s, Port=%d\n", nextServerIP, nextServerPort);
                // Implement redirection logic here

                // Calculate the length of the remaining payload after stripping
                int remaining_length = packet_length - (redirect_end - packet) - 1;

                // Move the remaining data to the beginning of the packet
                memmove(payload, redirect_end + 1, remaining_length);

                // Update the packet length
                packet_length = remaining_length + 14;

                // Forward the modified packet to the next server
                // Implement code to send the packet to the next server
            } else {
                printf("Invalid format after '!'\n");
            }
        } else {
            printf("No '#' character found after '!'\n");
        }
    } else {
        printf("No '!' character found in the packet.\n");
    }
}

int main() {
    int raw_socket;
    char buffer[MAX_PACKET_SIZE];
    struct ifreq ifr;

    raw_socket = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
    if (raw_socket == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&ifr, 0, sizeof(struct ifreq));
    strncpy(ifr.ifr_name, INTERFACE_NAME, IFNAMSIZ - 1);

    if (ioctl(raw_socket, SIOCGIFFLAGS, &ifr) == -1) {
        perror("Failed to set interface to promiscuous mode");
        close(raw_socket);
        exit(EXIT_FAILURE);
    }

    ifr.ifr_flags |= IFF_PROMISC;
    if (ioctl(raw_socket, SIOCSIFFLAGS, &ifr) == -1) {
        perror("Failed to set interface to promiscuous mode");
        close(raw_socket);
        exit(EXIT_FAILURE);
    }

    while (1) {
        int packet_length = recv(raw_socket, buffer, sizeof(buffer), 0);
        if (packet_length < 0) {
            perror("Packet reception error");
            break;
        }
        process_packet(buffer, packet_length);
    }

    close(raw_socket);
    return 0;
}

/////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PACKET_SIZE 4096

void error(const char *msg) {
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[]) {
    if (argc != 7) {
        fprintf(stderr, "Usage: %s <listen_ip> <listen_port> <src_ip> <src_port> <dest_ip> <dest_port>\n", argv[0]);
        exit(1);
    }

    const char *listen_ip = argv[1];
    int listen_port = atoi(argv[2]);
    const char *src_ip = argv[3];
    int src_port = atoi(argv[4]);
    const char *dest_ip = argv[5];
    int dest_port = atoi(argv[6]);

    // Create a raw socket to intercept packets
    int sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_TCP);
    if (sockfd == -1) {
        error("Socket creation error");
    }

    char packet[PACKET_SIZE];
    ssize_t packet_size;

    while (1) {
        packet_size = recv(sockfd, packet, PACKET_SIZE, 0);
        if (packet_size == -1) {
            error("Packet reception error");
        }

        struct ip *ip_header = (struct ip *)packet;
        struct tcphdr *tcp_header = (struct tcphdr *)(packet + (ip_header->ip_hl << 2));

        // Check if the packet's source IP and source port match the provided values
        if (strcmp(inet_ntoa(ip_header->ip_src), src_ip) == 0 && ntohs(tcp_header->th_sport) == src_port) {
            // Modify destination IP and port
            ip_header->ip_dst.s_addr = inet_addr(dest_ip);
            tcp_header->th_dport = htons(dest_port);

            // Recalculate IP checksum
            ip_header->ip_sum = 0;
            ip_header->ip_sum = htons(~(ip_header->ip_sum));

            // Recalculate TCP checksum
            tcp_header->th_sum = 0;
            tcp_header->th_sum = htons(~(tcp_header->th_sum));

            // Send the modified packet to the new destination
            struct sockaddr_in dest_addr;
            memset(&dest_addr, 0, sizeof(dest_addr));
            dest_addr.sin_family = AF_INET;
            dest_addr.sin_addr.s_addr = ip_header->ip_dst.s_addr;
            dest_addr.sin_port = tcp_header->th_dport;

            if (sendto(sockfd, packet, packet_size, 0, (struct sockaddr *)&dest_addr, sizeof(dest_addr)) == -1) {
                error("Packet sendto error");
            }
            
            printf("Redirected packet from %s:%d to %s:%d\n", src_ip, src_port, dest_ip, dest_port);
        }
    }

    close(sockfd);
    return 0;
}

/////////////////////////////////





#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <sys/time.h>

#define PACKET_SIZE 4096

void error(const char *msg) {
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[]) {
    if (argc != 9) {
        fprintf(stderr, "Usage: %s <listen_ip> <listen_port> <src_ip> <src_port> <dest_ip> <dest_port> <protocol (TCP/UDP)> <loop_duration>\n", argv[0]);
        exit(1);
    }

    const char *listen_ip = argv[1];
    int listen_port = atoi(argv[2]);
    const char *src_ip = argv[3];
    int src_port = atoi(argv[4]);
    const char *dest_ip = argv[5];
    int dest_port = atoi(argv[6]);
    const char *protocol = argv[7];
    int loop_duration = atoi(argv[8]);

    // Create a raw socket to intercept packets
    int sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
    if (sockfd == -1) {
        error("Socket creation error");
    }

    char packet[PACKET_SIZE];
    ssize_t packet_size;
    struct timeval start_time, current_time;

    gettimeofday(&start_time, NULL);
    
    while (1) {
        gettimeofday(&current_time, NULL);
        if (current_time.tv_sec - start_time.tv_sec >= loop_duration) {
            break;
        }

        packet_size = recv(sockfd, packet, PACKET_SIZE, 0);
        if (packet_size == -1) {
            error("Packet reception error");
        }

        struct ip *ip_header = (struct ip *)packet;

        if (strcmp(inet_ntoa(ip_header->ip_src), src_ip) == 0) {
            if (strcmp(protocol, "TCP") == 0) {
                struct tcphdr *tcp_header = (struct tcphdr *)(packet + (ip_header->ip_hl << 2));
                if (ntohs(tcp_header->th_sport) == src_port) {
                    ip_header->ip_dst.s_addr = inet_addr(dest_ip);
                    tcp_header->th_dport = htons(dest_port);
                    ip_header->ip_sum = 0;
                    ip_header->ip_sum = htons(~(ip_header->ip_sum));
                    tcp_header->th_sum = 0;
                    tcp_header->th_sum = htons(~(tcp_header->th_sum));

                    struct sockaddr_in dest_addr;
                    memset(&dest_addr, 0, sizeof(dest_addr));
                    dest_addr.sin_family = AF_INET;
                    dest_addr.sin_addr.s_addr = ip_header->ip_dst.s_addr;
                    dest_addr.sin_port = tcp_header->th_dport;

                    if (sendto(sockfd, packet, packet_size, 0, (struct sockaddr *)&dest_addr, sizeof(dest_addr)) == -1) {
                        error("Packet sendto error");
                    }

                    printf("Redirected TCP packet from %s:%d to %s:%d\n", src_ip, src_port, dest_ip, dest_port);
                }
            } else if (strcmp(protocol, "UDP") == 0) {
                struct udphdr *udp_header = (struct udphdr *)(packet + (ip_header->ip_hl << 2));
                if (ntohs(udp_header->uh_sport) == src_port) {
                    ip_header->ip_dst.s_addr = inet_addr(dest_ip);
                    udp_header->uh_dport = htons(dest_port);
                    ip_header->ip_sum = 0;
                    ip_header->ip_sum = htons(~(ip_header->ip_sum));
                    udp_header->uh_sum = 0;
                    udp_header->uh_sum = htons(~(udp_header->uh_sum));

                    struct sockaddr_in dest_addr;
                    memset(&dest_addr, 0, sizeof(dest_addr));
                    dest_addr.sin_family = AF_INET;
                    dest_addr.sin_addr.s_addr = ip_header->ip_dst.s_addr;
                    dest_addr.sin_port = udp_header->uh_dport;

                    if (sendto(sockfd, packet, packet_size, 0, (struct sockaddr *)&dest_addr, sizeof(dest_addr)) == -1) {
                        error("Packet sendto error");
                    }

                    printf("Redirected UDP packet from %s:%d to %s:%d\n", src_ip, src_port, dest_ip, dest_port);
                }
            }
        }
    }

    close(sockfd);
    return 0;
}

// USsage: ./packet_redirect 127.0.0.1 8080 192.168.1.10 12345 192.168.1.20 80 TCP 60



//////////////////////////

import sys
import socket
import threading

def redirect_packet(listen_ip, listen_port, src_ip, src_port, dest_ip, dest_port):
    try:
        # Create a socket to listen for incoming packets
        listen_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
        listen_socket.bind((listen_ip, listen_port))
        listen_socket.setsockopt(socket.IPPROTO_IP, socket.IP_HDRINCL, 1)
        
        print(f"Listening for incoming packets on {listen_ip}:{listen_port}")
        
        while True:
            packet, addr = listen_socket.recvfrom(65535)
            
            # Check if the packet's source IP and source port match the provided values
            if addr[0] == src_ip and packet[0] == src_port:
                # Modify the destination IP and port
                modified_packet = packet.replace(src_ip, dest_ip).replace(src_port, dest_port)
                
                # Create a new socket and send the modified packet to the destination
                send_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
                send_socket.sendto(modified_packet, (dest_ip, dest_port))
                send_socket.close()
                
                print(f"Redirected packet from {src_ip}:{src_port} to {dest_ip}:{dest_port}")
    
    except KeyboardInterrupt:
        print("Packet redirection terminated.")
        sys.exit(0)
    except Exception as e:
        print(f"An error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) != 7:
        print("Usage: python packet_redirect.py <listen_ip> <listen_port> <src_ip> <src_port> <dest_ip> <dest_port>")
        sys.exit(1)

    listen_ip = sys.argv[1]
    listen_port = int(sys.argv[2])
    src_ip = sys.argv[3]
    src_port = int(sys.argv[4])
    dest_ip = sys.argv[5]
    dest_port = int(sys.argv[6])

    redirect_packet(listen_ip, listen_port, src_ip, src_port, dest_ip, dest_port)




////////


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <sys/time.h>

#define PACKET_SIZE 4096

void error(const char *msg) {
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[]) {
    // Check for the correct number of command-line arguments
    if (argc != 9) {
        fprintf(stderr, "Usage: %s <listen_ip> <listen_port> <src_ip> <src_port> <dest_ip> <dest_port> <protocol (TCP/UDP)> <loop_duration>\n", argv[0]);
        exit(1);
    }

    const char *listen_ip = argv[1];
    int listen_port = atoi(argv[2]);
    const char *src_ip = argv[3];
    int src_port = atoi(argv[4]);
    const char *dest_ip = argv[5];
    int dest_port = atoi(argv[6]);
    const char *protocol = argv[7];
    int loop_duration = atoi(argv[8]);

    // Create a raw socket to intercept packets
    int sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);
    if (sockfd == -1) {
        error("Socket creation error");
    }

    char packet[PACKET_SIZE];
    ssize_t packet_size;
    struct timeval start_time, current_time;

    // Get the current time for the loop duration calculation
    gettimeofday(&start_time, NULL);
    
    // Main packet interception and redirection loop
    while (1) {
        // Get the current time
        gettimeofday(&current_time, NULL);

        // Check if the loop duration has elapsed
        if (current_time.tv_sec - start_time.tv_sec >= loop_duration) {
            break;
        }

        // Receive a packet
        packet_size = recv(sockfd, packet, PACKET_SIZE, 0);
        if (packet_size == -1) {
            error("Packet reception error");
        }

        struct ip *ip_header = (struct ip *)packet;

        // Check if the packet's source IP matches the provided source IP
        if (strcmp(inet_ntoa(ip_header->ip_src), src_ip) == 0) {
            // Handle TCP protocol
            if (strcmp(protocol, "TCP") == 0) {
                struct tcphdr *tcp_header = (struct tcphdr *)(packet + (ip_header->ip_hl << 2));
                
                // Check if the packet's source port matches the provided source port
                if (ntohs(tcp_header->th_sport) == src_port) {
                    // Modify destination IP and port
                    ip_header->ip_dst.s_addr = inet_addr(dest_ip);
                    tcp_header->th_dport = htons(dest_port);
                    
                    // Recalculate IP checksum
                    ip_header->ip_sum = 0;
                    ip_header->ip_sum = htons(~(ip_header->ip_sum));
                    
                    // Recalculate TCP checksum
                    tcp_header->th_sum = 0;
                    tcp_header->th_sum = htons(~(tcp_header->th_sum));

                    struct sockaddr_in dest_addr;
                    memset(&dest_addr, 0, sizeof(dest_addr));
                    dest_addr.sin_family = AF_INET;
                    dest_addr.sin_addr.s_addr = ip_header->ip_dst.s_addr;
                    dest_addr.sin_port = tcp_header->th_dport;

                    // Send the modified packet to the new destination
                    if (sendto(sockfd, packet, packet_size, 0, (struct sockaddr *)&dest_addr, sizeof(dest_addr)) == -1) {
                        error("Packet sendto error");
                    }

                    printf("Redirected TCP packet from %s:%d to %s:%d\n", src_ip, src_port, dest_ip, dest_port);
                }
            }
            // Handle UDP protocol
            else if (strcmp(protocol, "UDP") == 0) {
                struct udphdr *udp_header = (struct udphdr *)(packet + (ip_header->ip_hl << 2));
                
                // Check if the packet's source port matches the provided source port
                if (ntohs(udp_header->uh_sport) == src_port) {
                    // Modify destination IP and port
                    ip_header->ip_dst.s_addr = inet_addr(dest_ip);
                    udp_header->uh_dport = htons(dest_port);
                    
                    // Recalculate IP checksum
                    ip_header->ip_sum = 0;
                    ip_header->ip_sum = htons(~(ip_header->ip_sum));
                    
                    // Recalculate UDP checksum
                    udp_header->uh_sum = 0;
                    udp_header->uh_sum = htons(~(udp_header->uh_sum));

                    struct sockaddr_in dest_addr;
                    memset(&dest_addr, 0, sizeof(dest_addr));
                    dest_addr.sin_family = AF_INET;
                    dest_addr.sin_addr.s_addr = ip_header->ip_dst.s_addr;
                    dest_addr.sin_port = udp_header->uh_dport;

                    // Send the modified packet to the new destination
                    if (sendto(sockfd, packet, packet_size, 0, (struct sockaddr *)&dest_addr, sizeof(dest_addr)) == -1) {
                        error("Packet sendto error");
                    }

                    printf("Redirected UDP packet from %s:%d to %s:%d\n", src_ip, src_port, dest_ip, dest_port);
                }
            }
        }
    }

    // Close the socket
    close(sockfd);
    return 0;
}


/////////////////////// 


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/time.h>

// Function to create a socket and bind it for listening
int createAndBindSocket(const char* listenIP, int listenPort, int protocol) {
    int socketFd;

    // Create a socket based on the specified protocol (TCP or UDP)
    if (protocol == IPPROTO_TCP) {
        socketFd = socket(AF_INET, SOCK_STREAM, 0); // TCP socket
    } else if (protocol == IPPROTO_UDP) {
        socketFd = socket(AF_INET, SOCK_DGRAM, 0); // UDP socket
    } else {
        perror("Invalid protocol");
        exit(1);
    }

    if (socketFd == -1) {
        perror("Socket creation error");
        exit(1);
    }

    struct sockaddr_in addr;
    memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = inet_addr(listenIP);
    addr.sin_port = htons(listenPort);

    // Bind the socket to the specified address
    if (bind(socketFd, (struct sockaddr*)&addr, sizeof(addr)) == -1) {
        perror("Bind error");
        close(socketFd);
        exit(1);
    }

    return socketFd;
}

// Function to handle packet redirection
void redirectPackets(int listenSocket, const char* destIP, int destPort, int duration) {
    struct sockaddr_in destAddr;
    memset(&destAddr, 0, sizeof(destAddr));
    destAddr.sin_family = AF_INET;
    destAddr.sin_addr.s_addr = inet_addr(destIP);
    destAddr.sin_port = htons(destPort);

    printf("Packet redirection started. Duration: %d seconds\n", duration);

    // Set a timeout for the duration of redirection
    struct timeval timeout;
    timeout.tv_sec = duration;
    timeout.tv_usec = 0;
    setsockopt(listenSocket, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout));

    while (1) {
        char buffer[1024];
        struct sockaddr_in srcAddr;
        socklen_t srcAddrLen = sizeof(srcAddr);

        ssize_t bytesRead = recvfrom(listenSocket, buffer, sizeof(buffer), 0, (struct sockaddr*)&srcAddr, &srcAddrLen);

        if (bytesRead == -1) {
            printf("Redirection completed.\n");
            break; // Timeout or error occurred, exit the loop
        }

        ssize_t bytesSent = sendto(listenSocket, buffer, bytesRead, 0, (struct sockaddr*)&destAddr, sizeof(destAddr));

        if (bytesSent == -1) {
            perror("Send error");
            close(listenSocket);
            exit(1);
        }
    }

    // Clean up and close the socket
    close(listenSocket);
}

int main(int argc, char* argv[]) {
    if (argc != 1) {
        fprintf(stderr, "Usage: %s\n", argv[0]);
        exit(1);
    }

    char listenIP[16];
    int listenPort, srcPort, destPort, protocol, duration;

    // Prompt the user for Listen_IP
    printf("Enter Listen_IP: ");
    scanf("%s", listenIP);

    // Prompt the user for Listen_PORT
    printf("Enter Listen_PORT: ");
    scanf("%d", &listenPort);

    // Prompt the user for Src_PORT
    printf("Enter Src_PORT: ");
    scanf("%d", &srcPort);

    // Prompt the user for Dest_IP
    printf("Enter Dest_IP: ");
    scanf("%s", listenIP);

    // Prompt the user for Dest_PORT
    printf("Enter Dest_PORT: ");
    scanf("%d", &destPort);

    // Prompt the user for Protocol (1 for TCP, 2 for UDP)
    printf("Enter Protocol (1 for TCP, 2 for UDP): ");
    scanf("%d", &protocol);

    // Prompt the user for Duration in seconds
    printf("Enter Duration (seconds): ");
    scanf("%d", &duration);

    int listenSocket = createAndBindSocket(listenIP, listenPort, protocol);

    redirectPackets(listenSocket, destIP, destPort, duration);

    return 0;
}

//////////
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/time.h>

// Function to create a socket and bind it for listening
int createAndBindSocket(const char* listenIP, int listenPort, int protocol) {
    int socketFd;

    // Create a socket based on the specified protocol (TCP or UDP)
    if (protocol == IPPROTO_TCP) {
        socketFd = socket(AF_INET, SOCK_STREAM, 0); // TCP socket
    } else if (protocol == IPPROTO_UDP) {
        socketFd = socket(AF_INET, SOCK_DGRAM, 0); // UDP socket
    } else {
        perror("Invalid protocol");
        exit(1);
    }

    if (socketFd == -1) {
        perror("Socket creation error");
        exit(1);
    }

    struct sockaddr_in addr;
    memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = inet_addr(listenIP);
    addr.sin_port = htons(listenPort);

    // Bind the socket to the specified address
    if (bind(socketFd, (struct sockaddr*)&addr, sizeof(addr)) == -1) {
        perror("Bind error");
        close(socketFd);
        exit(1);
    }

    return socketFd;
}

// Function to handle packet redirection
void redirectPackets(int listenSocket, const char* destIP, int destPort, int protocol, int duration) {
    struct sockaddr_in destAddr;
    memset(&destAddr, 0, sizeof(destAddr));
    destAddr.sin_family = AF_INET;
    destAddr.sin_addr.s_addr = inet_addr(destIP);
    destAddr.sin_port = htons(destPort);

    printf("Packet redirection started. Duration: %d seconds\n", duration);

    // Set a timeout for the duration of redirection
    struct timeval timeout;
    timeout.tv_sec = duration;
    timeout.tv_usec = 0;
    setsockopt(listenSocket, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout));

    // Create a buffer for packet data
    char buffer[1024];
    memset(buffer, 0, sizeof(buffer));

    // Simulate sending packets
    int packetCount = 0;

    while (1) {
        ssize_t bytesSent = sendto(listenSocket, buffer, sizeof(buffer), 0, (struct sockaddr*)&destAddr, sizeof(destAddr));

        if (bytesSent == -1) {
            perror("Send error");
            close(listenSocket);
            exit(1);
        }

        packetCount++;

        printf("Sent packet %d\n", packetCount);

        if (duration <= 0) {
            printf("Redirection completed.\n");
            break; // If duration is 0, exit the loop immediately
        }
    }

    // Clean up and close the socket
    close(listenSocket);
}

int main() {
    char listenIP[16];
    int listenPort, srcPort, destPort, protocol, duration;

    // Prompt the user for Listen_IP
    printf("Enter Listen_IP: ");
    scanf("%s", listenIP);

    // Prompt the user for Listen_PORT
    printf("Enter Listen_PORT: ");
    scanf("%d", &listenPort);

    // Prompt the user for Src_IP (not used in this example)
    printf("Enter Src_IP (unused): ");
    scanf("%*s");

    // Prompt the user for Src_PORT (not used in this example)
    printf("Enter Src_PORT (unused): ");
    scanf("%d", &srcPort);

    // Prompt the user for Dest_IP
    char destIP[16];
    printf("Enter Dest_IP: ");
    scanf("%s", destIP);

    // Prompt the user for Dest_PORT
    printf("Enter Dest_PORT: ");
    scanf("%d", &destPort);

    // Prompt the user for Protocol (1 for TCP, 2 for UDP)
    printf("Enter Protocol (1 for TCP, 2 for UDP): ");
    scanf("%d", &protocol);

    // Prompt the user for Duration in seconds
    printf("Enter Duration (seconds): ");
    scanf("%d", &duration);

    int listenSocket = createAndBindSocket(listenIP, listenPort, protocol);

    redirectPackets(listenSocket, destIP, destPort, protocol, duration);

    return 0;
}







//////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/time.h>

// Function to create a socket and bind it for listening
int createAndBindSocket(const char* listenIP, int listenPort, int protocol) {
    int socketFd;

    // Create a socket based on the specified protocol (TCP or UDP)
    if (protocol == IPPROTO_TCP) {
        socketFd = socket(AF_INET, SOCK_STREAM, 0); // TCP socket
    } else if (protocol == IPPROTO_UDP) {
        socketFd = socket(AF_INET, SOCK_DGRAM, 0); // UDP socket
    } else {
        perror("Invalid protocol");
        exit(1);
    }

    if (socketFd == -1) {
        perror("Socket creation error");
        exit(1);
    }

    struct sockaddr_in addr;
    memset(&addr, 0, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = inet_addr(listenIP);
    addr.sin_port = htons(listenPort);

    // Bind the socket to the specified address
    if (bind(socketFd, (struct sockaddr*)&addr, sizeof(addr)) == -1) {
        perror("Bind error");
        close(socketFd);
        exit(1);
    }

    return socketFd;
}

// Function to handle TCP packet redirection
void redirectTCPPackets(const char* listenIP, int listenPort, const char* srcIP, int srcPort, const char* destIP, int destPort, int duration) {
    int listenSocket = createAndBindSocket(listenIP, listenPort, IPPROTO_TCP);

    printf("TCP server is listening on %s:%d\n", listenIP, listenPort);

    struct sockaddr_in destAddr;
    memset(&destAddr, 0, sizeof(destAddr));
    destAddr.sin_family = AF_INET;
    destAddr.sin_addr.s_addr = inet_addr(destIP);
    destAddr.sin_port = htons(destPort);

    printf("Packet redirection to %s:%d started. Duration: %d seconds\n", destIP, destPort, duration);

    // Accept incoming connections
    if (listen(listenSocket, 5) == -1) {
        perror("Listen error");
        close(listenSocket);
        exit(1);
    }

    int destSocket = socket(AF_INET, SOCK_STREAM, 0); // Create a socket for connecting to the destination server

    if (connect(destSocket, (struct sockaddr*)&destAddr, sizeof(destAddr)) == -1) {
        perror("Destination server connection error");
        close(listenSocket);
        close(destSocket);
        exit(1);
    }

    printf("Connected to destination server %s:%d\n", destIP, destPort);

    // Set a timeout for the duration of redirection
    struct timeval timeout;
    timeout.tv_sec = duration;
    timeout.tv_usec = 0;
    setsockopt(listenSocket, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout));

    // Main packet redirection loop
    while (1) {
        char buffer[1024];
        ssize_t bytesRead = recv(listenSocket, buffer, sizeof(buffer), 0);

        if (bytesRead <= 0) {
            printf("Redirection completed.\n");
            break;
        }

        ssize_t bytesSent = send(destSocket, buffer, bytesRead, 0);

        if (bytesSent == -1) {
            perror("Send error");
            close(listenSocket);
            close(destSocket);
            exit(1);
        }
    }

    // Clean up and close the sockets
    close(listenSocket);
    close(destSocket);
}

// Function to handle UDP packet redirection
void redirectUDPPackets(const char* listenIP, int listenPort, const char* destIP, int destPort, int duration) {
    int listenSocket = createAndBindSocket(listenIP, listenPort, IPPROTO_UDP);

    printf("UDP server is listening on %s:%d\n", listenIP, listenPort);

    struct sockaddr_in destAddr;
    memset(&destAddr, 0, sizeof(destAddr));
    destAddr.sin_family = AF_INET;
    destAddr.sin_addr.s_addr = inet_addr(destIP);
    destAddr.sin_port = htons(destPort);

    printf("Packet redirection to %s:%d started. Duration: %d seconds\n", destIP, destPort, duration);

    // Set a timeout for the duration of redirection
    struct timeval timeout;
    timeout.tv_sec = duration;
    timeout.tv_usec = 0;
    setsockopt(listenSocket, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout));

    // Main packet redirection loop
    while (1) {
        char buffer[1024];
        struct sockaddr_in srcAddr;
        socklen_t srcAddrLen = sizeof(srcAddr);

        ssize_t bytesRead = recvfrom(listenSocket, buffer, sizeof(buffer), 0, (struct sockaddr*)&srcAddr, &srcAddrLen);

        if (bytesRead <= 0) {
            printf("Redirection completed.\n");
            break;
        }

        ssize_t bytesSent = sendto(listenSocket, buffer, bytesRead, 0, (struct sockaddr*)&destAddr, sizeof(destAddr));

        if (bytesSent == -1) {
            perror("Sendto error");
            close(listenSocket);
            exit(1);
        }
    }

    // Clean up and close the socket
    close(listenSocket);
}

int main() {
    char listenIP[16], srcIP[16], destIP[16];
    int listenPort, srcPort, destPort, protocol, duration;

    // Prompt the user for Listen_IP
    printf("Enter Listen_IP: ");
    scanf("%s", listenIP);

    // Prompt the user for Listen_PORT
    printf("Enter Listen_PORT: ");
    scanf("%d", &listenPort);

    // Prompt the user for Src_IP
    printf("Enter Src_IP: ");
    scanf("%s", srcIP);

    // Prompt the user for Src_PORT
    printf("Enter Src_PORT: ");
    scanf("%d", &srcPort);

    // Prompt the user for Dest_IP
    printf("Enter Dest_IP: ");
    scanf("%s", destIP);

    // Prompt the user for Dest_PORT
    printf("Enter Dest_PORT: ");
    scanf("%d", &destPort);

    // Prompt the user for Protocol (1 for TCP, 2 for UDP)
    printf("Enter Protocol (1 for TCP, 2 for UDP): ");
    scanf("%d", &protocol);

    // Prompt the user for Duration in seconds
    printf("Enter Duration (seconds): ");
    scanf("%d", &duration);

    if (protocol == 1) {
        // TCP Protocol
        redirectTCPPackets(listenIP, listenPort, srcIP, srcPort, destIP, destPort, duration);
    } else if (protocol == 2) {
        // UDP Protocol
        redirectUDPPackets(listenIP, listenPort, destIP, destPort, duration);
    } else {
        printf("Invalid protocol choice.\n");
        exit(1);
    }

    return 0;
}
