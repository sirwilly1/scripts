from scapy.all import *
from scapy.contrib.snmp import SNMP, SNMPget, SNMPvarbind
from scapy.contrib.snmp import SNMPv2c
from scapy.asn1.asn1 import ASN1_Packet, ASN1_SEQUENCE, ASN1_INTEGER, ASN1_OID, ASN1_NULL
from scapy.asn1.asn1fields import ASN1F_SEQUENCE, ASN1F_OID, ASN1F_INTEGER, ASN1F_NULL

# Define the target IP and port
target_ip = "192.168.1.1"  # Replace with your target IP
target_port = 161  # SNMP typically uses port 161

# Define the community string (often 'public' for SNMPv2c)
community_string = "public"

# Define the OID you want to query
oid = "1.3.6.1.2.1.1.1.0"  # Replace with your specific OID

# Construct the SNMP PDU using ASN.1F
class MySNMP(ASN1_Packet):
    name = "MySNMP"
    fields_desc = [
        ASN1F_SEQUENCE(
            "seq",
            ASN1_SEQUENCE(
                [
                    ASN1F_INTEGER("version", 1),  # SNMPv2c
                    ASN1F_OID("community", ASN1_OID(community_string)),
                    ASN1F_SEQUENCE(
                        "pdu",
                        ASN1_SEQUENCE(
                            [
                                ASN1F_INTEGER("request_id", 1),
                                ASN1F_INTEGER("error_status", 0),
                                ASN1F_INTEGER("error_index", 0),
                                ASN1F_SEQUENCE(
                                    "varbindlist",
                                    ASN1_SEQUENCE(
                                        [
                                            ASN1F_OID("oid", ASN1_OID(oid)),
                                            ASN1F_NULL("value", ASN1_NULL("")),
                                        ]
                                    ),
                                ),
                            ]
                        ),
                    ),
                ]
            ),
        )
    ]


# Create the packet
asn1_snmp_packet = MySNMP()

# Send the packet using Scapy
packet = IP(dst=target_ip) / UDP(dport=target_port) / Raw(load=asn1_snmp_packet.build())
response = sr1(packet, timeout=2)

# Display the response and decode the 'load' field if it's in RAW format
if response:
    response.show()
    # Check if the response contains a Raw layer with a load field
    if Raw in response:
        raw_load = response[Raw].load
        # Decode the load field to a readable string using ASN.1
        asn1_response = MySNMP(raw_load)
        print("Decoded ASN.1 Response:", asn1_response.show())
    else:
        print("No RAW load found in the response.")
else:
    print("No response received.")


-----------------------

from scapy.all import *
from scapy.asn1.asn1 import ASN1_Packet, ASN1_SEQUENCE, ASN1_INTEGER, ASN1_OID, ASN1_NULL
from scapy.asn1.asn1fields import ASN1F_SEQUENCE, ASN1F_OID, ASN1F_INTEGER, ASN1F_NULL

# Define target and SNMP details
target_ip, target_port, community_string, oid = "192.168.1.1", 161, "public", "1.3.6.1.2.1.1.1.0"

# Construct the SNMP PDU using ASN.1F
class MySNMP(ASN1_Packet):
    name = "MySNMP"
    fields_desc = [ASN1F_SEQUENCE("seq", ASN1_SEQUENCE([
        ASN1F_INTEGER("version", 1),
        ASN1F_OID("community", ASN1_OID(community_string)),
        ASN1F_SEQUENCE("pdu", ASN1_SEQUENCE([
            ASN1F_INTEGER("request_id", 1),
            ASN1F_INTEGER("error_status", 0),
            ASN1F_INTEGER("error_index", 0),
            ASN1F_SEQUENCE("varbindlist", ASN1_SEQUENCE([
                ASN1F_OID("oid", ASN1_OID(oid)),
                ASN1F_NULL("value", ASN1_NULL(""))
            ]))
        ]))
    ]))]

# Create and send the packet
asn1_snmp_packet = MySNMP()
packet = IP(dst=target_ip) / UDP(dport=target_port) / Raw(load=asn1_snmp_packet.build())
response = sr1(packet, timeout=2)

# Display and decode the response
if response and Raw in response:
    asn1_response = MySNMP(response[Raw].load)
    print("Decoded ASN.1 Response:", asn1_response.show())
else:
    print("No valid response received.")
