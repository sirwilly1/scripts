Sure, I'll modify the function to take a string input instead of using the `ProtocolType` enumeration. Here's the updated code:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/select.h>

#define BUF_SIZE 1024

void redirect(const char *protocol, const char *target_ip, int listen_port, int send_port) {
    int listen_fd, send_fd;
    struct sockaddr_in listen_addr, send_addr, target_addr;
    char buffer[BUF_SIZE];
    int is_udp = strcmp(protocol, "udp") == 0;
    
    // Create socket for listening
    if (is_udp)
        listen_fd = socket(AF_INET, SOCK_DGRAM, 0);
    else
        listen_fd = socket(AF_INET, SOCK_STREAM, 0);
        
    if (listen_fd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Bind the socket
    memset(&listen_addr, 0, sizeof(listen_addr));
    listen_addr.sin_family = AF_INET;
    listen_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    listen_addr.sin_port = htons(listen_port);
    if (bind(listen_fd, (struct sockaddr *)&listen_addr, sizeof(listen_addr)) == -1) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    // Create socket for sending
    if (is_udp)
        send_fd = socket(AF_INET, SOCK_DGRAM, 0);
    else
        send_fd = socket(AF_INET, SOCK_STREAM, 0);
        
    if (send_fd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Set up target address
    memset(&target_addr, 0, sizeof(target_addr));
    target_addr.sin_family = AF_INET;
    target_addr.sin_addr.s_addr = inet_addr(target_ip);
    target_addr.sin_port = htons(send_port);

    fd_set read_fds;
    int max_fd = (listen_fd > send_fd) ? listen_fd : send_fd;

    while (1) {
        FD_ZERO(&read_fds);
        FD_SET(listen_fd, &read_fds);

        // Wait for activity on the listening socket
        if (select(max_fd + 1, &read_fds, NULL, NULL, NULL) == -1) {
            perror("select");
            exit(EXIT_FAILURE);
        }

        if (FD_ISSET(listen_fd, &read_fds)) {
            if (is_udp) {
                // Receive data from the client
                struct sockaddr_in client_addr;
                socklen_t addr_len = sizeof(client_addr);
                ssize_t recv_len = recvfrom(listen_fd, buffer, BUF_SIZE, 0, (struct sockaddr *)&client_addr, &addr_len);
                if (recv_len == -1) {
                    perror("recvfrom");
                    exit(EXIT_FAILURE);
                }

                // Send data to the target server
                if (sendto(send_fd, buffer, recv_len, 0, (struct sockaddr *)&target_addr, sizeof(target_addr)) == -1) {
                    perror("sendto");
                    exit(EXIT_FAILURE);
                }
            } else {
                // Accept incoming connection
                socklen_t addr_len = sizeof(target_addr);
                int client_fd = accept(listen_fd, (struct sockaddr *)&target_addr, &addr_len);
                if (client_fd == -1) {
                    perror("accept");
                    exit(EXIT_FAILURE);
                }

                // Forward data between client and target server
                ssize_t recv_len;
                while ((recv_len = recv(client_fd, buffer, BUF_SIZE, 0)) > 0) {
                    if (send(send_fd, buffer, recv_len, 0) == -1) {
                        perror("send");
                        exit(EXIT_FAILURE);
                    }
                    // Receive response from target server
                    recv_len = recv(send_fd, buffer, BUF_SIZE, 0);
                    if (recv_len == -1) {
                        perror("recv");
                        exit(EXIT_FAILURE);
                    }
                    // Forward response to client
                    if (send(client_fd, buffer, recv_len, 0) == -1) {
                        perror("send");
                        exit(EXIT_FAILURE);
                    }
                }

                if (recv_len == -1) {
                    perror("recv");
                    exit(EXIT_FAILURE);
                }

                // Close client socket
                close(client_fd);
            }
        }
    }

    // Close sockets
    close(listen_fd);
    close(send_fd);
}

int main() {
    // Example usage for UDP
    redirect("udp", "target_ip", listen_port, send_port);

    // Example usage for TCP
    // redirect("tcp", "target_ip", listen_port, send_port);
    
    return 0;
}
```

Now, you can call the `redirect()` function with either `"udp"` or `"tcp"` as the first argument to specify the protocol. The function will then set up the appropriate socket types and behave accordingly.

--------

Certainly! We can simplify the code by using `send()` for both UDP and TCP. Here's the modified code:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/select.h>

#define BUF_SIZE 1024

void redirect(const char *protocol, const char *target_ip, int listen_port, int send_port) {
    int listen_fd, send_fd;
    struct sockaddr_in listen_addr, send_addr, target_addr;
    char buffer[BUF_SIZE];
    int is_udp = strcmp(protocol, "udp") == 0;
    
    // Create socket for listening
    listen_fd = (is_udp) ? socket(AF_INET, SOCK_DGRAM, 0) : socket(AF_INET, SOCK_STREAM, 0);
    if (listen_fd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Bind the socket
    memset(&listen_addr, 0, sizeof(listen_addr));
    listen_addr.sin_family = AF_INET;
    listen_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    listen_addr.sin_port = htons(listen_port);
    if (bind(listen_fd, (struct sockaddr *)&listen_addr, sizeof(listen_addr)) == -1) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    // Create socket for sending
    send_fd = (is_udp) ? socket(AF_INET, SOCK_DGRAM, 0) : socket(AF_INET, SOCK_STREAM, 0);
    if (send_fd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Set up target address
    memset(&target_addr, 0, sizeof(target_addr));
    target_addr.sin_family = AF_INET;
    target_addr.sin_addr.s_addr = inet_addr(target_ip);
    target_addr.sin_port = htons(send_port);

    fd_set read_fds;
    int max_fd = (listen_fd > send_fd) ? listen_fd : send_fd;

    while (1) {
        FD_ZERO(&read_fds);
        FD_SET(listen_fd, &read_fds);

        // Wait for activity on the listening socket
        if (select(max_fd + 1, &read_fds, NULL, NULL, NULL) == -1) {
            perror("select");
            exit(EXIT_FAILURE);
        }

        if (FD_ISSET(listen_fd, &read_fds)) {
            if (is_udp) {
                // Receive data from the client
                struct sockaddr_in client_addr;
                socklen_t addr_len = sizeof(client_addr);
                ssize_t recv_len = recvfrom(listen_fd, buffer, BUF_SIZE, 0, (struct sockaddr *)&client_addr, &addr_len);
                if (recv_len == -1) {
                    perror("recvfrom");
                    exit(EXIT_FAILURE);
                }

                // Send data to the target server
                if (send(send_fd, buffer, recv_len, 0) == -1) {
                    perror("send");
                    exit(EXIT_FAILURE);
                }
            } else {
                // Accept incoming connection
                socklen_t addr_len = sizeof(target_addr);
                int client_fd = accept(listen_fd, (struct sockaddr *)&target_addr, &addr_len);
                if (client_fd == -1) {
                    perror("accept");
                    exit(EXIT_FAILURE);
                }

                // Forward data between client and target server
                ssize_t recv_len;
                while ((recv_len = recv(client_fd, buffer, BUF_SIZE, 0)) > 0) {
                    if (send(send_fd, buffer, recv_len, 0) == -1) {
                        perror("send");
                        exit(EXIT_FAILURE);
                    }
                    // Receive response from target server
                    recv_len = recv(send_fd, buffer, BUF_SIZE, 0);
                    if (recv_len == -1) {
                        perror("recv");
                        exit(EXIT_FAILURE);
                    }
                    // Forward response to client
                    if (send(client_fd, buffer, recv_len, 0) == -1) {
                        perror("send");
                        exit(EXIT_FAILURE);
                    }
                }

                if (recv_len == -1) {
                    perror("recv");
                    exit(EXIT_FAILURE);
                }

                // Close client socket
                close(client_fd);
            }
        }
    }

    // Close sockets
    close(listen_fd);
    close(send_fd);
}

int main() {
    // Example usage for UDP
    redirect("udp", "target_ip", listen_port, send_port);

    // Example usage for TCP
    // redirect("tcp", "target_ip", listen_port, send_port);
    
    return 0;
}
```

In this modified version, `send()` is used for both UDP and TCP transmissions. This simplifies the code by removing the need for separate logic based on the protocol.


----------


Yes, it's possible to use `recv()` for both UDP and TCP. However, for UDP, `recvfrom()` is typically used because it allows you to retrieve the sender's address. 

Here's the modified code using `recv()` for both UDP and TCP:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/select.h>

#define BUF_SIZE 1024

void redirect(const char *protocol, const char *target_ip, int listen_port, int send_port) {
    int listen_fd, send_fd;
    struct sockaddr_in listen_addr, send_addr, target_addr;
    char buffer[BUF_SIZE];
    int is_udp = strcmp(protocol, "udp") == 0;
    
    // Create socket for listening
    listen_fd = (is_udp) ? socket(AF_INET, SOCK_DGRAM, 0) : socket(AF_INET, SOCK_STREAM, 0);
    if (listen_fd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Bind the socket
    memset(&listen_addr, 0, sizeof(listen_addr));
    listen_addr.sin_family = AF_INET;
    listen_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    listen_addr.sin_port = htons(listen_port);
    if (bind(listen_fd, (struct sockaddr *)&listen_addr, sizeof(listen_addr)) == -1) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    // Create socket for sending
    send_fd = (is_udp) ? socket(AF_INET, SOCK_DGRAM, 0) : socket(AF_INET, SOCK_STREAM, 0);
    if (send_fd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Set up target address
    memset(&target_addr, 0, sizeof(target_addr));
    target_addr.sin_family = AF_INET;
    target_addr.sin_addr.s_addr = inet_addr(target_ip);
    target_addr.sin_port = htons(send_port);

    fd_set read_fds;
    int max_fd = (listen_fd > send_fd) ? listen_fd : send_fd;

    while (1) {
        FD_ZERO(&read_fds);
        FD_SET(listen_fd, &read_fds);

        // Wait for activity on the listening socket
        if (select(max_fd + 1, &read_fds, NULL, NULL, NULL) == -1) {
            perror("select");
            exit(EXIT_FAILURE);
        }

        if (FD_ISSET(listen_fd, &read_fds)) {
            if (is_udp) {
                // Receive data
                ssize_t recv_len = recv(listen_fd, buffer, BUF_SIZE, 0);
                if (recv_len == -1) {
                    perror("recv");
                    exit(EXIT_FAILURE);
                }

                // Send data to the target server
                if (sendto(send_fd, buffer, recv_len, 0, (struct sockaddr *)&target_addr, sizeof(target_addr)) == -1) {
                    perror("sendto");
                    exit(EXIT_FAILURE);
                }
            } else {
                // Accept incoming connection
                socklen_t addr_len = sizeof(target_addr);
                int client_fd = accept(listen_fd, (struct sockaddr *)&target_addr, &addr_len);
                if (client_fd == -1) {
                    perror("accept");
                    exit(EXIT_FAILURE);
                }

                // Forward data between client and target server
                ssize_t recv_len;
                while ((recv_len = recv(client_fd, buffer, BUF_SIZE, 0)) > 0) {
                    if (send(send_fd, buffer, recv_len, 0) == -1) {
                        perror("send");
                        exit(EXIT_FAILURE);
                    }
                    // Receive response from target server
                    recv_len = recv(send_fd, buffer, BUF_SIZE, 0);
                    if (recv_len == -1) {
                        perror("recv");
                        exit(EXIT_FAILURE);
                    }
                    // Forward response to client
                    if (send(client_fd, buffer, recv_len, 0) == -1) {
                        perror("send");
                        exit(EXIT_FAILURE);
                    }
                }

                if (recv_len == -1) {
                    perror("recv");
                    exit(EXIT_FAILURE);
                }

                // Close client socket
                close(client_fd);
            }
        }
    }

    // Close sockets
    close(listen_fd);
    close(send_fd);
}

int main() {
    // Example usage for UDP
    redirect("udp", "target_ip", listen_port, send_port);

    // Example usage for TCP
    // redirect("tcp", "target_ip", listen_port, send_port);
    
    return 0;
}
```

In this modified version, `recv()` is used for both UDP and TCP. For UDP, the sender's address is not retrieved directly, but since the target address is known, it can be used for sending the response back. For TCP, the sender's address is not relevant as it's a connection-oriented protocol.




---------
import socket
import sys

def receive_data(protocol, listen_port):
    if protocol.lower() == 'udp':
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    elif protocol.lower() == 'tcp':
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    else:
        print("Invalid protocol")
        return

    try:
        sock.bind(('localhost', listen_port))
        sock.listen(1)  # Only needed for TCP

        print(f"Listening for {protocol.upper()} data on port {listen_port}...")
        while True:
            if protocol.lower() == 'udp':
                data, addr = sock.recvfrom(1024)
                print(f"Received UDP data from {addr}: {data.decode()}")
            elif protocol.lower() == 'tcp':
                conn, addr = sock.accept()
                data = conn.recv(1024)
                print(f"Received TCP data from {addr}: {data.decode()}")
                conn.close()
    finally:
        sock.close()

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python receive_data.py <protocol> <port>")
        sys.exit(1)
    protocol = sys.argv[1]
    listen_port = int(sys.argv[2])
    receive_data(protocol, listen_port)


-------
python receive_data.py <protocol> <port>

-------

Certainly! Here's the modified version of the program where the port is passed in as an argument:

```python
import socket
import sys

def receive_tcp_data(listen_port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(('0.0.0.0', listen_port))
    sock.listen(1)
    
    print(f"Listening for TCP data on port {listen_port}...")
    while True:
        conn, addr = sock.accept()
        with conn:
            print(f"Connection from {addr}")
            data = conn.recv(1024)
            if data:
                print(f"Received TCP data: {data.decode()}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python receive_tcp_data.py <port>")
        sys.exit(1)
    listen_port = int(sys.argv[1])
    receive_tcp_data(listen_port)
```

Now you can run the program from the command line like this:

```
python receive_tcp_data.py <port>
```

Replace `<port>` with the desired port number.


------

Sure! Here's the modified program to listen for both TCP and UDP data, with an additional argument for the protocol:

```python
import socket
import sys

def receive_data(protocol, listen_port):
    if protocol.lower() == 'udp':
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    elif protocol.lower() == 'tcp':
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    else:
        print("Invalid protocol")
        return

    sock.bind(('0.0.0.0', listen_port))
    if protocol.lower() == 'tcp':
        sock.listen(1)
        
    print(f"Listening for {protocol.upper()} data on port {listen_port}...")
    while True:
        if protocol.lower() == 'udp':
            data, addr = sock.recvfrom(1024)
            print(f"Received UDP data from {addr}: {data.decode()}")
        elif protocol.lower() == 'tcp':
            conn, addr = sock.accept()
            with conn:
                print(f"Connection from {addr}")
                data = conn.recv(1024)
                if data:
                    print(f"Received TCP data: {data.decode()}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python receive_data.py <protocol> <port>")
        sys.exit(1)
    protocol = sys.argv[1]
    listen_port = int(sys.argv[2])
    receive_data(protocol, listen_port)
```

Now you can run the program from the command line like this:

```
python receive_data.py <protocol> <port>
```

Replace `<protocol>` with 'UDP' or 'TCP' and `<port>` with the desired port number.

-------



Here's the modified version of the code without the use of `select()`:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#define BUF_SIZE 1024

void redirect(const char *protocol, const char *target_ip, int listen_port, int send_port) {
    int listen_fd, send_fd;
    struct sockaddr_in listen_addr, send_addr, target_addr;
    char buffer[BUF_SIZE];
    int is_udp = strcmp(protocol, "udp") == 0;
    
    // Create socket for listening
    listen_fd = (is_udp) ? socket(AF_INET, SOCK_DGRAM, 0) : socket(AF_INET, SOCK_STREAM, 0);
    if (listen_fd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Bind the socket
    memset(&listen_addr, 0, sizeof(listen_addr));
    listen_addr.sin_family = AF_INET;
    listen_addr.sin_addr.s_addr = htonl(INADDR_ANY);
    listen_addr.sin_port = htons(listen_port);
    if (bind(listen_fd, (struct sockaddr *)&listen_addr, sizeof(listen_addr)) == -1) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    // Create socket for sending
    send_fd = (is_udp) ? socket(AF_INET, SOCK_DGRAM, 0) : socket(AF_INET, SOCK_STREAM, 0);
    if (send_fd == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Set up target address
    memset(&target_addr, 0, sizeof(target_addr));
    target_addr.sin_family = AF_INET;
    target_addr.sin_addr.s_addr = inet_addr(target_ip);
    target_addr.sin_port = htons(send_port);

    if (is_udp) {
        // UDP redirection
        while (1) {
            // Receive data from the client
            struct sockaddr_in client_addr;
            socklen_t addr_len = sizeof(client_addr);
            ssize_t recv_len = recvfrom(listen_fd, buffer, BUF_SIZE, 0, (struct sockaddr *)&client_addr, &addr_len);
            if (recv_len == -1) {
                perror("recvfrom");
                exit(EXIT_FAILURE);
            }

            // Send data to the target server
            if (sendto(send_fd, buffer, recv_len, 0, (struct sockaddr *)&target_addr, sizeof(target_addr)) == -1) {
                perror("sendto");
                exit(EXIT_FAILURE);
            }
        }
    } else {
        // TCP redirection
        if (listen(listen_fd, 1) == -1) {
            perror("listen");
            exit(EXIT_FAILURE);
        }

        // Accept incoming connection
        socklen_t addr_len = sizeof(target_addr);
        int client_fd = accept(listen_fd, (struct sockaddr *)&target_addr, &addr_len);
        if (client_fd == -1) {
            perror("accept");
            exit(EXIT_FAILURE);
        }

        // Forward data between client and target server
        ssize_t recv_len;
        while ((recv_len = recv(client_fd, buffer, BUF_SIZE, 0)) > 0) {
            if (send(send_fd, buffer, recv_len, 0) == -1) {
                perror("send");
                exit(EXIT_FAILURE);
            }
            // Receive response from target server
            recv_len = recv(send_fd, buffer, BUF_SIZE, 0);
            if (recv_len == -1) {
                perror("recv");
                exit(EXIT_FAILURE);
            }
            // Forward response to client
            if (send(client_fd, buffer, recv_len, 0) == -1) {
                perror("send");
                exit(EXIT_FAILURE);
            }
        }

        if (recv_len == -1) {
            perror("recv");
            exit(EXIT_FAILURE);
        }

        // Close client socket
        close(client_fd);
    }

    // Close sockets
    close(listen_fd);
    close(send_fd);
}

int main() {
    // Example usage for UDP
    // redirect("udp", "target_ip", listen_port, send_port);

    // Example usage for TCP
    // redirect("tcp", "target_ip", listen_port, send_port);
    
    return 0;
}
```

In this modified version, the TCP redirection part has been simplified to accept a single connection and forward data between the client and the target server. The code no longer uses `select()` to monitor multiple sockets' activity.


