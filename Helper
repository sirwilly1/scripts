Certainly! Here's a simple Python script that takes the number of copies as input through the command line and creates copies of the specified files with new names:

```python
import os
import shutil
import sys

def copy_files(num_copies):
    # List of file paths to make copies of
    file_paths = [
        "home/script/src/test.txt",
        # Add more file paths as needed
    ]

    for path in file_paths:
        # Extract directory and filename from the path
        directory, filename = os.path.split(path)
        # Extract file name and extension
        base_name, extension = os.path.splitext(filename)

        for i in range(1, num_copies + 1):
            # Construct new file name with the corresponding number
            new_filename = f"{base_name}{i}{extension}"
            # Create the full path for the new file
            new_path = os.path.join(directory, new_filename)

            # Copy the file to the new path
            shutil.copy2(path, new_path)
            print(f"Copy created: {new_path}")

if __name__ == "__main__":
    # Check if the correct number of command line arguments is provided
    if len(sys.argv) != 2:
        print("Usage: python script.py <num_copies>")
        sys.exit(1)

    # Get the number of copies from the command line
    num_copies = int(sys.argv[1])

    # Call the function to copy files
    copy_files(num_copies)
```

Save this script in a file (e.g., `copy_script.py`) and run it from the command line, providing the number of copies as an argument:

```bash
python copy_script.py 3
```

This example will create three copies of each specified file with names like `test1.txt`, `test2.txt`, and `test3.txt`. Adjust the `file_paths` list with the desired file paths.




import subprocess

def launch_terminator_with_panes():
    try:
        subprocess.run(['terminator', '--layout', '4'])
    except FileNotFoundError:
        print("Terminator not found. Make sure it's installed on your system.")

# Call the function to launch Terminator with four panes
launch_terminator_with_panes()









import os
import shutil
import sys
import configparser

def read_config(file_path):
    config = configparser.ConfigParser()
    config.read(file_path)
    return config

def write_config(file_path, config):
    with open(file_path, 'w') as config_file:
        config.write(config_file)

def undo_copy_files():
    # List of file paths to make copies of
    file_paths = [
        "home/script/src/test.txt",
        "home/script/src/config.ini",
        "home/script/src/setup.txt",  # Added new file path
        # Add more file paths as needed
    ]

    for path in file_paths:
        # Extract directory and filename from the path
        directory, filename = os.path.split(path)
        # Extract file name and extension
        base_name, extension = os.path.splitext(filename)

        for i in range(1, 2):  # Assuming only one undo step, you can adjust if needed
            # Construct original file name
            original_filename = f"{base_name}{i}{extension}"
            # Create the full path for the original file
            original_path = os.path.join(directory, original_filename)

            # Undo the copy by removing the new file
            if os.path.exists(original_path):
                os.remove(original_path)
                print(f"Undo: Removed {original_path}")

def copy_files(num_copies):
    # List of file paths to make copies of
    file_paths = [
        "home/script/src/test.txt",
        "home/script/src/config.ini",
        "home/script/src/setup.txt",  # Added new file path
        # Add more file paths as needed
    ]

    for path in file_paths:
        # Extract directory and filename from the path
        directory, filename = os.path.split(path)
        # Extract file name and extension
        base_name, extension = os.path.splitext(filename)

        for i in range(1, num_copies + 1):
            # Construct new file name with the corresponding number
            new_filename = f"{base_name}{i}{extension}"
            # Create the full path for the new file
            new_path = os.path.join(directory, new_filename)

            # Copy the file to the new path
            shutil.copy2(path, new_path)
            print(f"Copy created: {new_path}")

            # Update config.ini with the new file name
            if filename == "config.ini":
                config = read_config(path)
                for key in config:
                    for name in file_paths:
                        config[key] = config[key].replace(os.path.basename(name), os.path.basename(new_path))

                # Write the updated config.ini to the new path
                write_config(new_path, config)

                # Update the new config.ini with the new paths and names
                new_config = read_config(new_path)
                for new_file_path in file_paths:
                    new_filename = os.path.basename(new_file_path)
                    new_config[new_filename] = os.path.join(directory, new_filename)

                    # Update variables inside config.ini with the new paths
                    for key in new_config:
                        if key != new_filename and new_file_path in new_config[key]:
                            new_config[key] = new_config[key].replace(new_file_path, os.path.join(directory, new_filename))

                # Write the updated new config.ini to the new path
                write_config(new_path, new_config)

if __name__ == "__main__":
    # Check if the correct number of command line arguments is provided
    if len(sys.argv) != 2:
        print("Usage: python script.py <num_copies or undo>")
        sys.exit(1)

    arg = sys.argv[1].lower()

    if arg == "undo":
        undo_copy_files()
    else:
        # Get the number of copies from the command line
        num_copies = int(arg)

        # Call the function to copy files and update config.ini
        copy_files(num_copies)


