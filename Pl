Sure! Here is the modified function where `new_dest_ip_str` is passed as an argument:

```c
#include <stdio.h>
#include <netinet/ip.h>
#include <arpa/inet.h>

// Function to modify the destination IP address in the packet
void modifyPacket(struct ip* packet, const char* new_dest_ip_str) {
    if (packet == NULL) {
        fprintf(stderr, "Invalid packet\n");
        return;
    }

    if (new_dest_ip_str == NULL) {
        fprintf(stderr, "Invalid IP address string\n");
        return;
    }

    // Convert the string IP address to binary form
    struct in_addr new_dest_ip;
    if (inet_aton(new_dest_ip_str, &new_dest_ip) == 0) {
        fprintf(stderr, "Invalid IP address\n");
        return;
    }

    // Modify the destination IP address in the packet
    packet->ip_dst = new_dest_ip;

    // Recompute the IP checksum (optional but recommended)
    packet->ip_sum = 0; // Clear the existing checksum
    packet->ip_sum = compute_ip_checksum((unsigned short*)packet, packet->ip_hl * 4);
}

// Function to compute the IP header checksum
unsigned short compute_ip_checksum(unsigned short* buf, int len) {
    unsigned long sum = 0;
    while (len > 1) {
        sum += *buf++;
        len -= 2;
    }
    if (len == 1) {
        sum += *(unsigned char*)buf;
    }
    sum = (sum >> 16) + (sum & 0xFFFF);
    sum += (sum >> 16);
    return (unsigned short)(~sum);
}
```

### Explanation:
1. **Function Declaration**:
   - `void modifyPacket(struct ip* packet, const char* new_dest_ip_str)` is the function that takes a pointer to an `ip` structure and a string containing the new destination IP address as its parameters.

2. **Error Handling**:
   - The function checks if the `packet` or `new_dest_ip_str` is `NULL` and prints an error message if either is invalid.

3. **IP Address Conversion**:
   - The new destination IP address is converted from its string form to binary form using `inet_aton`.

4. **Packet Modification**:
   - The destination IP address in the packet is updated with the new address.

5. **Checksum Calculation**:
   - The IP checksum is recalculated to ensure the packet header is valid.

You can call this function like this:
```c
struct ip* myPacket; // Assume this is a valid IP packet
const char* newIP = "192.168.1.100";
modifyPacket(myPacket, newIP);
```

This setup makes it more flexible to modify the destination IP address as needed by passing different IP address strings to the function.
